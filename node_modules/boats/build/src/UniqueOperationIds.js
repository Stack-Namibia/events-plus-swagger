"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const lcFirst_1 = tslib_1.__importDefault(require("./lcFirst"));
const upath_1 = tslib_1.__importDefault(require("upath"));
const removeFileExtension_1 = tslib_1.__importDefault(require("./removeFileExtension"));
const methods_1 = require("./constants/methods");
const upath_2 = require("upath");
const StringStyle_1 = require("./enums/StringStyle");
const ucFirst_1 = tslib_1.__importDefault(require("./ucFirst"));
class UniqueOperationIds {
    // eslint-disable-next-line max-lines-per-function
    getUniqueOperationIdFromPath(filePath, stripValue, tails = '', cwd, removeMethod, style = StringStyle_1.StringStyle.camelCase, segmentStyle = StringStyle_1.StringStyle.camelCase, prefixes) {
        if (typeof tails === 'string') {
            tails = [tails];
        }
        tails = tails.filter((tail) => {
            return tail.length > 0;
        });
        cwd = cwd || upath_1.default.toUnix(process.cwd());
        filePath = filePath.replace(cwd, '');
        filePath = removeFileExtension_1.default(filePath.replace(stripValue, ''));
        let filePathParts = filePath.split(upath_2.sep);
        // inject the prefixes if given
        if (prefixes && prefixes.length > 0) {
            filePathParts = prefixes.concat(filePathParts);
        }
        for (let i = 0; i < filePathParts.length; ++i) {
            if (filePathParts[i] !== upath_2.sep) {
                switch (segmentStyle) {
                    case StringStyle_1.StringStyle.snakeCase:
                        filePathParts[i] = lodash_1.default.snakeCase(this.removeCurlys(filePathParts[i]));
                        break;
                    case StringStyle_1.StringStyle.PascalCase:
                        filePathParts[i] = ucFirst_1.default(lodash_1.default.camelCase(this.removeCurlys(filePathParts[i])));
                        break;
                    case StringStyle_1.StringStyle.kebabCase:
                        filePathParts[i] = lodash_1.default.kebabCase(this.removeCurlys(filePathParts[i]));
                        break;
                    default:
                        filePathParts[i] = lodash_1.default.camelCase(this.removeCurlys(filePathParts[i]));
                        break;
                }
                // upper case for camel and pascal for overall styling
                if ([StringStyle_1.StringStyle.camelCase, StringStyle_1.StringStyle.PascalCase].includes(style)) {
                    filePathParts[i] = ucFirst_1.default(filePathParts[i]);
                }
            }
        }
        if (removeMethod) {
            if (methods_1.methods.includes(filePathParts[filePathParts.length - 1].toLowerCase())) {
                filePathParts.pop();
            }
        }
        if (tails) {
            filePathParts = filePathParts.concat(tails);
        }
        switch (style) {
            case StringStyle_1.StringStyle.kebabCase:
                return lcFirst_1.default(filePathParts.join('-'));
            case StringStyle_1.StringStyle.PascalCase:
                return filePathParts.join('');
            case StringStyle_1.StringStyle.snakeCase:
                return filePathParts.join('_');
            default:
                return lcFirst_1.default(filePathParts.join(''));
        }
    }
    /**
     * Strings the path param curlies from a folder name
     */
    removeCurlys(input) {
        return input.replace('{', '').replace('}', '');
    }
}
exports.default = new UniqueOperationIds();
