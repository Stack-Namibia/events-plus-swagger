"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const fs_1 = require("fs");
const upath_1 = tslib_1.__importDefault(require("upath"));
const js_yaml_1 = tslib_1.__importDefault(require("js-yaml"));
const removeFileExtension_1 = tslib_1.__importDefault(require("./removeFileExtension"));
const buildIndexFromPath_1 = tslib_1.__importDefault(require("./utils/buildIndexFromPath"));
const getMethodFromFileName_1 = tslib_1.__importDefault(require("./utils/getMethodFromFileName"));
class AutoIndexer {
    getFiles(dir) {
        const dirents = fs_1.readdirSync(dir, { withFileTypes: true });
        const files = dirents.map((dirent) => {
            const res = upath_1.default.resolve(dir, dirent.name);
            return dirent.isDirectory() ? this.getFiles(res) : res;
        });
        return Array.prototype.concat(...files);
    }
    cleanFilePaths(dir, filePaths, indexFile) {
        return filePaths.map((filePath) => {
            return filePath !== indexFile && filePath.replace(dir, '');
        });
    }
    buildPathsYamlString(cleanPaths, boatsrc, channels, components, paths, trimOpts) {
        const indexObject = {};
        cleanPaths.forEach((cleanPath) => {
            if (cleanPath) {
                const dir = upath_1.default.dirname(cleanPath);
                const filename = upath_1.default.basename(cleanPath);
                const method = getMethodFromFileName_1.default(filename);
                if (paths) {
                    indexObject[dir] = indexObject[dir] || {};
                    indexObject[dir][method] = {
                        $ref: `.${cleanPath}`,
                    };
                }
                if (channels) {
                    indexObject[removeFileExtension_1.default(cleanPath)] = {
                        $ref: `.${cleanPath}`,
                    };
                }
                if (components) {
                    indexObject[buildIndexFromPath_1.default(cleanPath, trimOpts, boatsrc.fancyPluralization)] = {
                        $ref: `.${cleanPath}`,
                    };
                }
            }
        });
        return js_yaml_1.default.dump(indexObject, {
            indent: 2,
        });
    }
    /**
     * Returns a string from an auto-built yaml file
     */
    getIndexYaml(indexFile, boatsrc, options) {
        const absoluteIndexFilePath = upath_1.default.join(process.cwd(), indexFile);
        const dir = upath_1.default.join(process.cwd(), upath_1.default.dirname(indexFile));
        const files = this.getFiles(dir);
        const cleanPaths = this.cleanFilePaths(dir, files, absoluteIndexFilePath);
        return this.buildPathsYamlString(cleanPaths, boatsrc, options.channels, options.components, options.paths, options.remove);
    }
}
exports.default = new AutoIndexer();
