"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const UniqueOperationIds_1 = tslib_1.__importDefault(require("../UniqueOperationIds"));
const StringStyle_1 = require("../enums/StringStyle");
it('standard action v1WeatherGet', () => {
    expect(UniqueOperationIds_1.default.getUniqueOperationIdFromPath('src/paths/v1/weather/get.yml', 'paths/', undefined, 'src/')).toBe('v1WeatherGet');
});
it('custom strip value', () => {
    expect(UniqueOperationIds_1.default.getUniqueOperationIdFromPath('src/paths/more/v1/weather/get.yml', 'paths/more/', undefined, 'src/')).toBe('v1WeatherGet');
});
it('handle snake-case', () => {
    expect(UniqueOperationIds_1.default.getUniqueOperationIdFromPath('src/paths/more/v1/weather-is-bad/get.yml', 'paths/more/', undefined, 'src/')).toBe('v1WeatherIsBadGet');
});
it('handle snake-case', () => {
    expect(UniqueOperationIds_1.default.getUniqueOperationIdFromPath('some/dir/src/paths/weather-is-bad/get.yml', 'src/paths/', undefined, 'some/dir/')).toBe('weatherIsBadGet');
});
it('should be able to remove the method if present', async () => {
    expect(UniqueOperationIds_1.default.getUniqueOperationIdFromPath('some/dir/src/paths/weather-is-bad/get.yml', 'src/paths/', undefined, 'some/dir/', true)).toBe('weatherIsBad');
});
it('should be able to inject a single preset', async () => {
    expect(UniqueOperationIds_1.default.getUniqueOperationIdFromPath('src/paths/weather-is-bad/get.yml', 'src/paths/', undefined, 'some/dir/', true, StringStyle_1.StringStyle.camelCase, StringStyle_1.StringStyle.camelCase, ['bobby'])).toBe('bobbyWeatherIsBad');
});
it('should be able to inject many presets', async () => {
    expect(UniqueOperationIds_1.default.getUniqueOperationIdFromPath('src/paths/weather-is-bad/get.yml', 'src/paths/', undefined, 'some/dir/', true, StringStyle_1.StringStyle.camelCase, StringStyle_1.StringStyle.camelCase, ['bobby', 'Awesome'])).toBe('bobbyAwesomeWeatherIsBad');
});
it('should be able to inject many presets and Pascal case', async () => {
    expect(UniqueOperationIds_1.default.getUniqueOperationIdFromPath('src/paths/weather-is-bad/get.yml', 'src/paths/', undefined, 'some/dir/', true, StringStyle_1.StringStyle.PascalCase, StringStyle_1.StringStyle.camelCase, ['bobby', 'Awesome'])).toBe('BobbyAwesomeWeatherIsBad');
});
it('should be able to inject many presets and snake case', async () => {
    expect(UniqueOperationIds_1.default.getUniqueOperationIdFromPath('src/paths/weather-is-bad/get.yml', 'src/paths/', undefined, 'some/dir/', true, StringStyle_1.StringStyle.snakeCase, StringStyle_1.StringStyle.camelCase, ['bobby', 'Awesome'])).toBe('bobby_awesome_weatherIsBad');
});
it('should be able to inject many presets and kebab case', async () => {
    expect(UniqueOperationIds_1.default.getUniqueOperationIdFromPath('src/paths/weather-is-bad/get.yml', 'src/paths/', undefined, 'some/dir/', true, StringStyle_1.StringStyle.kebabCase, StringStyle_1.StringStyle.camelCase, ['bobby', 'Awesome'])).toBe('bobby-awesome-weatherIsBad');
});
it('should be able to inject many presets and kebab case and kebab case for the segment style', async () => {
    expect(UniqueOperationIds_1.default.getUniqueOperationIdFromPath('src/paths/weather-is-bad/get.yml', 'src/paths/', undefined, 'some/dir/', true, StringStyle_1.StringStyle.kebabCase, StringStyle_1.StringStyle.kebabCase, ['bobby', 'Awesome'])).toBe('bobby-awesome-weather-is-bad');
});
it('should be able to inject many presets and snakeCase overall and snakeCase for the segment style', async () => {
    expect(UniqueOperationIds_1.default.getUniqueOperationIdFromPath('src/paths/weather-is-bad/get.yml', 'src/paths/', undefined, 'some/dir/', true, StringStyle_1.StringStyle.snakeCase, StringStyle_1.StringStyle.snakeCase, ['bobby', 'Awesome'])).toBe('bobby_awesome_weather_is_bad');
});
it('should be able to inject many presets and kebab case and kebab case for the segment style', async () => {
    expect(UniqueOperationIds_1.default.getUniqueOperationIdFromPath('src/paths/weather-is-bad/get.yml', 'src/paths/', undefined, 'some/dir/', true, StringStyle_1.StringStyle.snakeCase, StringStyle_1.StringStyle.kebabCase, ['bobby', 'Awesome'])).toBe('bobby_awesome_weather-is-bad');
});
