"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const upath_1 = tslib_1.__importDefault(require("upath"));
const js_yaml_1 = tslib_1.__importDefault(require("js-yaml"));
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const getOutputName_1 = tslib_1.__importDefault(require("./getOutputName"));
const validate_1 = tslib_1.__importDefault(require("./validate"));
const json_schema_ref_parser_1 = tslib_1.__importDefault(require("@apidevtools/json-schema-ref-parser"));
/**
 * Bundles many files together and returns the final output path
 */
exports.default = async (input) => {
    const { excludeVersion, dereference, inputFile, outputFile, boatsRc } = input;
    const doNotValidate = input.doNotValidate || false;
    const indentation = input.indentation || 2;
    let bundled;
    try {
        bundled = await json_schema_ref_parser_1.default.bundle(inputFile, boatsRc.jsonSchemaRefParserBundleOpts);
        if (dereference) {
            bundled = await json_schema_ref_parser_1.default.dereference(bundled);
        }
        if (doNotValidate) {
            console.warn('Bypassing validation as dontValidateOutput flag seen');
        }
        else {
            await validate_1.default.decideThenValidate(bundled, boatsRc);
        }
        let contents;
        if (upath_1.default.extname(outputFile) === '.json') {
            contents = JSON.stringify(bundled, null, indentation);
        }
        else {
            contents = js_yaml_1.default.dump(bundled, {
                indent: indentation
            });
        }
        fs_extra_1.default.ensureDirSync(upath_1.default.dirname(outputFile));
        const pathToWriteTo = getOutputName_1.default(outputFile, bundled, excludeVersion);
        fs_extra_1.default.writeFileSync(pathToWriteTo, contents);
        return pathToWriteTo;
    }
    catch (e) {
        console.error(JSON.stringify(bundled, undefined, 2));
        throw e;
    }
};
