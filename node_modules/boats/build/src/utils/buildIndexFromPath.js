"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const upath_1 = tslib_1.__importDefault(require("upath"));
const getMethodFromFileName_1 = tslib_1.__importDefault(require("./getMethodFromFileName"));
const ucFirst_1 = tslib_1.__importDefault(require("../ucFirst"));
const removeFileExtension_1 = tslib_1.__importDefault(require("../removeFileExtension"));
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const pluralize_1 = tslib_1.__importDefault(require("pluralize"));
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
function buildIndexFromPath(cleanPath, trimOpts, enableFancyPluralization) {
    const dir = upath_1.default.dirname(cleanPath);
    const filename = upath_1.default.basename(cleanPath);
    const method = getMethodFromFileName_1.default(filename);
    let _path = cleanPath;
    if (trimOpts && trimOpts.dropBaseName && new RegExp(method + '$', 'i').test(lodash_1.default.camelCase(dir))) {
        _path = cleanPath.replace(filename, '');
    }
    const trim = typeof trimOpts === 'string' ? trimOpts : '';
    const rawIndex = ucFirst_1.default(lodash_1.default.camelCase(removeFileExtension_1.default(_path)));
    const isPlural = trim && rawIndex.endsWith(`${trim}s`);
    if (!isPlural || !enableFancyPluralization) {
        return rawIndex.replace(trim, '');
    }
    const trimmedIndex = rawIndex.replace(`${trim}s`, '');
    const pluralIndex = pluralize_1.default.plural(trimmedIndex);
    // Add an extra "s" to words which are the same in both plural and non-plural form (i.e. sheep)
    return isPlural && trimmedIndex === pluralIndex
        ? `${pluralIndex}s`
        : pluralIndex;
}
exports.default = buildIndexFromPath;
