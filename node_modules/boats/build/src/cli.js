"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const bundlerSwaggerParse_1 = tslib_1.__importDefault(require("./bundlerSwaggerParse"));
const commander_1 = tslib_1.__importDefault(require("./commander"));
const convertToNunjucksOrYaml_1 = tslib_1.__importDefault(require("./convertToNunjucksOrYaml"));
const Template_1 = tslib_1.__importDefault(require("./Template"));
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const npm_tool_version_check_1 = tslib_1.__importDefault(require("npm-tool-version-check"));
const upath_1 = tslib_1.__importDefault(require("upath"));
const package_json_1 = tslib_1.__importDefault(require("../package.json"));
require("colors");
const GetCheckCorrectBoatsRc_1 = tslib_1.__importDefault(require("./GetCheckCorrectBoatsRc"));
const Snippets_1 = tslib_1.__importDefault(require("./Snippets"));
const init_1 = require("./init");
const dotenvFilePath = upath_1.default.join(process.cwd(), '.env');
// If a .env file exists call dotenv package to set into the env vars
if (fs_extra_1.default.pathExistsSync(dotenvFilePath)) {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    require('dotenv').config({ path: dotenvFilePath });
}
// eslint-disable-next-line max-lines-per-function
const parseCli = async () => {
    const program = commander_1.default(process.argv);
    if (program.yes) {
        process.env.npm_tool_version_check__quiet = 'true';
    }
    if (process.env.NODE_ENV !== 'test') {
        await npm_tool_version_check_1.default(package_json_1.default.version, package_json_1.default.name, 'BOATS').catch(catchHandle);
    }
    if (program.init) {
        return await init_1.init();
    }
    // Fetch the boatsrc here and not before the init, as the init may inject a specific file based on the type initialised
    const boatsRc = GetCheckCorrectBoatsRc_1.default.getBoatsConfig();
    if (program.convert_to_njk) {
        // Convert files to njk
        convertToNunjucksOrYaml_1.default(program.convert_to_njk, 'njk');
    }
    else if (program.convert_to_yml) {
        // Convert files to yaml
        convertToNunjucksOrYaml_1.default(program.convert_to_yml, 'yml');
    }
    else if (program.injectSnippet) {
        // Snippets
        new Snippets_1.default(program);
    }
    else {
        // parse the directory then validate and bundle with swagger-parser
        const returnFile = await Template_1.default.directoryParse(program.input, program.output, program.indentation, program.strip_value, program.variables, program.functions, boatsRc);
        const pathWrittenTo = await bundlerSwaggerParse_1.default({
            inputFile: returnFile,
            outputFile: program.output,
            boatsRc,
            dereference: program.dereference,
            doNotValidate: program.dontValidateOutput,
            excludeVersion: program.exclude_version,
            indentation: program.indentation
        });
        console.log('Completed, the files were rendered, validated and bundled to: '.green + pathWrittenTo.green.bold);
    }
};
const catchHandle = (error) => {
    console.trace(error);
    process.exit(1);
};
parseCli().catch(catchHandle);
