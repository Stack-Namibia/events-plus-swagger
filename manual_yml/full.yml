swagger: '2.0'
info:
  description: This is the events plus server
  version: 1.0.0
  title: Events Plus
  termsOfService: http://swagger.io/terms/
  contact:
    email: sibalatanics@outlook.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
host: events-plus-api.com
basePath: /v1
tags:
  - name: Event
    description: Operations about events
  - name: User
    description: Operations about user
  - name: Ticket
    description: Operations about tickets
  - name: Location
    description: Operations about locations
  - name: Category
    description: Operations about categories
  - name: Host
    description: Operations about hosts
schemes:
  - https
  - http
paths:
  /event:
    post:
      tags:
        - Event
      summary: Add a new event
      description: ''
      operationId: addEvent
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Event object that needs to be added
          required: true
          schema:
            $ref: '#/definitions/Event'
      responses:
        '405':
          description: Invalid input
      security:
        - eventplus_auth:
            - write:events
    put:
      tags:
        - Event
      summary: Update an existing event
      description: ''
      operationId: updateEvent
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Event object that needs to be added
          required: true
          schema:
            $ref: '#/definitions/Event'
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '405':
          description: Validation exception
      security:
        - eventplus_auth:
            - write:events
    get:
      tags:
        - Event
      summary: get Event
      description: Multiple status values can be provided with comma separated strings
      operationId: getEvents
      produces:
        - application/xml
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Event'
        '400':
          description: No events found
  /event/{eventId}:
    get:
      tags:
        - Event
      summary: Find event by ID
      description: Returns a single event
      operationId: getEventById
      produces:
        - application/xml
        - application/json
      parameters:
        - name: eventId
          in: path
          description: ID of event to return
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Event'
        '400':
          description: Invalid ID supplied
        '404':
          description: Event not found
    delete:
      tags:
        - Event
      summary: Deletes a event
      description: ''
      operationId: deleteEvent
      produces:
        - application/xml
        - application/json
      parameters:
        - name: api_key
          in: header
          required: false
          type: string
        - name: eventId
          in: path
          description: Event id to delete
          required: true
          type: string
          format: uuid
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - eventplus_auth:
            - write:events
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Created user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
      security:
        - api_key: []
  /user/login:
    get:
      tags:
        - User
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: string
          headers:
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
        '400':
          description: Invalid username/password supplied
      security:
        - eventplus_auth:
            - read:user
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      produces:
        - application/xml
        - application/json
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - User
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
      security:
        - eventplus_auth:
            - read:user
        - api_key: []
    put:
      tags:
        - User
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Updated user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      security:
        - eventplus_auth:
            - write:user
        - api_key: []
    delete:
      tags:
        - User
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
      security:
        - eventplus_auth:
            - read:user
        - api_key: []
securityDefinitions:
  eventplus_auth:
    type: oauth2
    authorizationUrl: http://petstore.swagger.io/oauth/dialog
    flow: implicit
    scopes:
      write:events: modify events in your account
      write:user: modify user account
      read:user: read user account
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  User:
    type: object
    properties:
      _id:
        type: string
        format: uuid
      first_name:
        type: string
        description: Users firstname
      last_name:
        type: string
        description: Users lastname
      email:
        type: string
        format: email
        description: Users email
      date_of_birth:
        type: string
        format: date
        description: Users date of birth
      password:
        type: string
        format: password
      auth_token:
        type: string
      favorites:
        $ref: '#/definitions/Event'
    example:
      _id: 6e210bfd-4673-493d-aa23-68305a718710
      first_name: Kathryn
      last_name: Bennett
      date_of_birth: '1962-01-01'
      email: example@gmail.com
      password: password
      created_at: '2020-01-01T00:00:00.000Z'
      updated_at: '2020-01-01T00:00:00.000Z'
      auth_token: >-
        adsjfdsoahdsfoiuahrnlvihbsaouybvclkhsabdcuyvcgqsoflurbgourygrwbekuiybvfkjhbkueyg
      favorites:
        - _id: 5e210bfd-4673-493d-aa23-68305a718710
    xml:
      name: User
  Event:
    type: object
    properties:
      _id:
        type: string
        format: uuid
      name:
        type: string
        description: Events name
      description:
        type: string
        description: Events description
      host:
        type: array
        items:
          $ref: '#/definitions/Host'
      category:
        type: array
        items:
          $ref: '#/definitions/Category'
      eventDate:
        type: string
        format: date
      endTime:
        type: string
      location:
        $ref: '#/definitions/Location'
      attendance:
        type: integer
        format: int32
      tickets:
        type: array
        items:
          $ref: '#/definitions/Ticket'
      images:
        type: array
        items:
          type: string
          format: uri
    example:
      _id: 6e210bfd-4673-493d-aa23-68305a718710
      name: Coffee concert
      description: Coffee concert
      host:
        - _id: 5e9f8f8f-f8f8-4f8f-8f8f-8f8f8f8f8f8f
          name: Seattle Coffee
          email: host@gmail.com
          phone_no: '123456789'
      category:
        - _id: 5e9f8f8f-f8f8-4f8f-8f8f-8f8f8f8f8f8f
          name: Concert
        - _id: 5e9f8f8f-f8f8-4f8f-8f8f-8f8f8f8f8f8f
          name: Coffee meetup
      event_datetime: '2020-01-01T00:00:00.000Z'
      end_time: '2020-01-01T00:00:00.000Z'
      location:
        _id: 5e9f8f8f-f8f8-4f8f-8f8f-8f8f8f8f8f8f
        name: Seattle Coffee
        address: '123456789'
        city: Seattle
        state: WA
        zip: '98000'
        country: USA
        longitude: '-122.3320708'
        latitude: '47.6062095'
      attendance: 150
      tickets:
        - _id: 5e9f8f8f-f8f8-4f8f-8f8f-8f8f8f8f8f8f
          type: General Admission
          price: '150.00'
          quantity: 100
        - _id: 5e9f8f8f-f8f8-4f8f-8f8f-8f8f8f8f8f8f
          type: VIP
          price: '200.00'
          quantity: 50
      images:
        - url: >-
            https://images.unsplash.com/photo-1518791841217-8f162f1e1131?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=60
    xml:
      name: Event
  Host:
    type: object
    properties:
      _id:
        type: string
        format: uuid
      name:
        type: string
      email:
        type: string
        format: email
      phoneNumber:
        type: string
    example:
      _id: 5e9f8f8f-f8f8-4f8f-8f8f-8f8f8f8f8f8f
      name: Seattle Coffee
      email: host@gmail.com
      phone_no: '123456789'
    xml:
      name: Host
  Category:
    type: object
    properties:
      _id:
        type: string
        format: uuid
      name:
        type: string
    example:
      _id: 5e9f8f8f-f8f8-4f8f-8f8f-8f8f8f8f8f8f
      name: Concert
    xml:
      name: Category
  Location:
    type: object
    properties:
      _id:
        type: string
        format: uuid
      name:
        type: string
      address:
        type: string
      city:
        type: string
      state:
        type: string
      zip:
        type: string
      country:
        type: string
      longitude:
        type: string
      latitude:
        type: string
    example:
      _id: 5e9f8f8f-f8f8-4f8f-8f8f-8f8f8f8f8f8f
      name: Seattle Coffee
      address: '123456789'
      city: Seattle
      state: WA
      zip: '98000'
      country: USA
      longitude: '-122.3320708'
      latitude: '47.6062095'
    xml:
      name: Location
  Ticket:
    type: object
    properties:
      _id:
        type: integer
        format: uuid
      type:
        type: string
        enum:
          - VIP
          - General
      price:
        type: number
      quantity:
        type: integer
    example:
      _id: 5e9f8f8f-f8f8-4f8f-8f8f-8f8f8f8f8f8f
      type: General Admission
      price: 150
      quantity: 100
    xml:
      name: Ticket
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string
